services:
  redis:
    image: redis:6-alpine
    ports:
      - '6379:6379'
    command: ["redis-server", "--appendonly", "yes"]

  job-fetcher-service:
    build:
      context: ./job-fetcher-service
    ports:
      - '3001:3001'
    environment:
      - RAPIDAPI_KEY=${RAPIDAPI_KEY}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    depends_on:
      - redis
      - vector_store
    networks:
      - default

  resume-analyzer-service:
    build:
      context: ./resume-analyzer-service
    ports:
      - '3002:3002'
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REPLICATE_API_TOKEN=${REPLICATE_API_TOKEN}
    depends_on:
      - redis
    networks:
      - default

  matching-engine-service:
    build:
      context: ./matching-engine-service
    ports:
      - '3003:3003'
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL}
    depends_on:
      - redis
      - vector_store
    networks:
      - default

  notification-service:
    build:
      context: ./notification-service
    ports:
      - '3004:3004'
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
    depends_on:
      - redis
    networks:
      - default

  api-gateway:
    build:
      context: ./api-gateway
    ports:
      - '80:80'
    depends_on:
      - job-fetcher-service
      - resume-analyzer-service
      - matching-engine-service
      - notification-service
    networks:
      - default

  # ollama-service:
  #   image: ollama/ollama:latest
  #   container_name: ollama_service
  #   ports:
  #     - '7869:11434'
  #   volumes:
  #     - ./ollama/ollama:/root/.ollama
  #   environment:
  #     - OLLAMA_KEEP_ALIVE=${OLLAMA_KEEP_ALIVE}
  #   tty: true
  #   restart: unless-stopped
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: nvidia
  #             count: 1
  #             capabilities: [gpu]
  #   networks:
  #     - default

  maildev:
    image: maildev/maildev
    container_name: maildev
    ports:
      - '1025:1025'
      - '1080:1080'
    networks:
      - default

  embedding-api-service:
    build:
      context: ./embedding-api-service
      dockerfile: Dockerfile
    ports:
      - '5500:5500'
    environment:
      - QDRANT_URL=${QDRANT_URL}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    depends_on:
      - qdrant
      - redis
    networks:
      - default
  
  qdrant:
    image: qdrant/qdrant
    ports:
      - '6333:6333'
    networks:
      - default
    volumes:
      - qdrant_data:/qdrant/storage

  vector_store:
    build: 
      context: ./vector_store
      dockerfile: Dockerfile
    ports:
      - '5200:5200'
    environment:
      - QDRANT_URL=${QDRANT_URL}
    depends_on:
      - qdrant
      - redis
    networks:
      - default
  
  postgresql:
    image: bitnami/postgresql:latest
    environment:
      - POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE}
      - POSTGRESQL_USER=${POSTGRESQL_USER}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - ALLOW_EMPTY_PASSWORD=yes
    volumes:
      - ./postgresql_data:/bitnami/postgresql

  keycloak:
    image: bitnami/keycloak:latest
    environment:
      - KEYCLOAK_CREATE_ADMIN_USER=true
      - KEYCLOAK_ADMIN_USER=${KEYCLOAK_ADMIN_USER}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - KEYCLOAK_DATABASE_HOST=postgresql
      - KEYCLOAK_DATABASE_USER=${POSTGRESQL_USER}
      - KEYCLOAK_DATABASE_PASSWORD=${POSTGRESQL_PASSWORD}
      - KEYCLOAK_DATABASE_NAME=${POSTGRESQL_DATABASE}
      - KEYCLOAK_JDBC_DRIVER=postgresql
    depends_on:
      - postgresql
    ports:
      - "8080:8080"

volumes:
  redis-data:
  qdrant_data:

networks:
  default:
